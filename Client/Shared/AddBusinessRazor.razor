@using BlazorEcommerceStaticWebApp.Client.Components;
@using BlazorEcommerceStaticWebApp.Client.Services.BusinessService;

@inherits AddBusinessBase
@inject IBusinessService BusinessService;

@if (ShowAddBusinessBase)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog" >
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@AddBusinessBaseTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                        @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                
                <div class="modal-body">
                    @ConfirmationMessage
                    <EditForm Model="business">
                   
                        <label for="Name">Name</label>
                        <InputText id="Name" @bind-Value="business.Name" class="form-control" />

                </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"
                        @onclick="() => OnConfirmationChange(false)">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger"
                        @onclick="() => OnConfirmationChange(true,business)">
                        Add
                    </button>
                </div>
                
            </div>
        </div>
    </div>
}
@code {

    protected override async Task OnConfirmationChange(bool value, Business business = null)
    {

        //add business here
        var test = business.Name;

        await BusinessService.CreateBusiness(business);
        

        ShowAddBusinessBase = false;
        await AddBusinessChanged.InvokeAsync(true);
    }
}

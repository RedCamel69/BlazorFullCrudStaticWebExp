@page "/student"
@page "/student/{id:int}"

@using BlazorEcommerceStaticWebApp.Client.Components;
@using BlazorEcommerceStaticWebApp.Client.Services.StudentService;
@using BlazorEcommerceStaticWebApp.Client.Services.LanguageService;
@using BlazorEcommerceStaticWebApp.Shared;

@inject IStudentService StudentService
@inject ILanguageService LanguageService

@if (Id is null)
{
    <PageTitle>Create a new Student</PageTitle>
    <h3>Create a new Student</h3>
}
else
{
    <PageTitle>Edit @student.FirstName @student.FirstName </PageTitle>
    <h3>Edit @student.FirstName @student.LastName </h3>
}

<EditForm Model="student" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" Context="CurrentEditContext">
    
    @*<h3>@FormSubmitMessage</h3>*@
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="FirstName">FirstName</label>
        <InputText id="FirstName" @bind-Value="student.FirstName" class="form-control" />
        <ValidationMessage For="@(() => student.FirstName)" />
    </div>

    <div class="form-group">
        <label for="FirstName">LastName</label>
        <InputText id="FirstName" @bind-Value="student.LastName" class="form-control" />
        <ValidationMessage For="@(() => student.LastName)" />
    </div>

    <div class="form-group">
        <label for="NickName">NickName</label>
        <InputText id="NickName" @bind-Value="student.NickName" class="form-control" />
        <ValidationMessage For="@(() => student.NickName)" />
    </div>

    <div class="form-group">
        <label for="School">School</label>
        <InputText id="School" @bind-Value="student.School" class="form-control" />
        <ValidationMessage For="@(() => student.School)" />
    </div>

    <div class="form-group">
        <label for="Language">Language</label>
        <InputNumber id="Language" @bind-Value="student.LanguageId" class="form-control" />

        <select id="SelectLanguage" @ref="SelectLanguageElement" name="number" @onchange="SelectLanguage">
            <option value="">Select a language</option>
            @foreach (Language l in LanguageService.Languages)
            {
                <option value="@l.LanguageId">@l.Name</option>
            }
        </select>

        <ValidationMessage For="@(() => student.LanguageId)" />
    </div>

    <button type="submit" class="btn btn-primary">@_btnText</button>

    @if (_displayDeleteButton)
    {
        <button type="button" class="btn btn-danger"
            @onclick="DeleteStudent">
            Delete Student
        </button>
    }
   </EditForm>

<h2>@FormSubmitMessage</h2>

<Confirm @ref="DeleteConfirmation"
         ConfirmationChanged="ConfirmDelete_Click"
         ConfirmationMessage=@($"Are you sure you want to delete student \"{student.FirstName} {student.LastName}\" ?")>
</Confirm>

@code {

    [Parameter]
    public int? Id { get; set; }

    protected ConfirmBase DeleteConfirmation { get; set; } = new ConfirmBase();

    protected ElementReference? SelectLanguageElement;  // set the @ref for attribute
    private string _btnText = string.Empty;
    private BlazorEcommerceStaticWebApp.Shared.Student student = new BlazorEcommerceStaticWebApp.Shared.Student { };
    private bool InvalidSubmit;
    private string? FormSubmitMessage;
    private bool _displayDeleteButton { get; set; }

    protected override void OnInitialized()
    {

        _btnText = Id == null ? "Save New Student" : "Update Student";
        LanguageService.LanguagesChanged += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await LanguageService.GetLanguages();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            _displayDeleteButton = true;
            var result = await StudentService.GetStudentById((int)Id);
            if (result is not null)
            {
                student = result;
            }          
        }
        else
        {

        }
    }

    async Task HandleSubmit()
    {
        try
        {
            InvalidSubmit = false;

            if (Id is null)
            {
                await StudentService.CreateStudent(student);
            }
            else
            {
                await StudentService.UpdateStudent(student);
            }
        }
        catch(Exception ex)
        {
            FormSubmitMessage = "Error Updating / Creating Student";
        }
    }

    public void HandleInvalidSubmit()
    {
        FormSubmitMessage = "Invalid Data Submitted";
        InvalidSubmit = true;
    }

    protected void DeleteStudent()
    {
        DeleteConfirmation.Show();
    }



    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        try
        {
            if (deleteConfirmed)
            {
                await StudentService.DeleteStudent(student);
            }
        }
        catch (Exception ex)
        {
            FormSubmitMessage = "Error Deleting Student";
        }
    }

    protected void SelectLanguage(ChangeEventArgs e)
    {
        int languageId = Convert.ToInt32(e.Value);
        var selectedLanguage = LanguageService.Languages.FirstOrDefault(x => x.LanguageId== languageId);
        if (selectedLanguage != null)
        {
            student.Language = selectedLanguage;
            student.LanguageId = selectedLanguage.LanguageId;
        }
        else
        {
            //todo diagnostics - error getting business details
        }
        
    }
}

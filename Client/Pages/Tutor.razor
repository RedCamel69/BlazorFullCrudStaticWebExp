@page "/tutor"
@page "/tutor/{id:int}"
@using BlazorEcommerceStaticWebApp.Client.Components;
@using BlazorEcommerceStaticWebApp.Client.Services.TutorService;
@using BlazorEcommerceStaticWebApp.Client.Services.BusinessService;

@inject ITutorService TutorService
@inject IBusinessService BusinessService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


@if (Id is null)
{
    <PageTitle>Create a new Tutor</PageTitle>
    <h3>Create a new Tutor</h3>
}
else
{
    <PageTitle>Edit @tutor.FirstName @tutor.FirstName </PageTitle>
    <h3>Edit @tutor.FirstName @tutor.LastName </h3>
}

<EditForm Model="tutor" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" Context="CurrentEditContext">

    @*<h3>@FormSubmitMessage</h3>*@
    <DataAnnotationsValidator/>
     <ValidationSummary/>
     
    <div class="form-group">
        <label for="title">FirstName</label>
        <InputText id="FirstName" @bind-Value="tutor.FirstName" class="form-control" />
        <ValidationMessage For="@(() => tutor.FirstName)" />
    </div>
    <div>
        <label for="LastName">LastName</label>
        <InputText id="LastName" @bind-Value="tutor.LastName" class="form-control" />
        <ValidationMessage For="@(() => tutor.LastName)" />
    </div>
    <div>
        <label for="ProtopageUrl">ProtopageUrl</label>
        <InputText id="ProtopageUrl" @bind-Value="tutor.ProtopageUrl" class="form-control" />
        <ValidationMessage For="@(() => tutor.ProtopageUrl)" />
    </div>
    <div>
        <label for="Email">Email</label>
        <div class="input-group @CurrentEditContext.FieldCssClass( () => tutor.Email)">
            <div class="input-group-prepend">
                <span class="input-group-text">@@</span>
            </div>
            <InputText id="Email" @bind-Value="tutor.Email" class="form-control" type="email" />
          
        </div>
        <ValidationMessage For="@(() => tutor.Email)" />
    </div>
    <div>
        <label for="Phone">Phone</label>
        <InputText id="Phone" @bind-Value="tutor.Phone" class="form-control" />
        <ValidationMessage For="@(() => tutor.Phone)" />
    </div>
    <div>
        <label for="MobilePhone">Mobile</label>
        <InputText id="MobilePhone" @bind-Value="tutor.MobilePhone" class="form-control" />
        <ValidationMessage For="@(() => tutor.MobilePhone)" />
    </div>
    <div>
     <label for="BusinessId">Business</label>

        <p>Either select a business from the list or <a @onclick="AddBusiness" class="addBusinessLink">add a new one</a></p>
        
        <select id="SelectBusiness" @ref="SelectBusinessElement" name="number" @onchange="SelectBusiness">
            <option value="">Select a business</option>            
            @foreach (Business b in BusinessService.Businesses)
            {
                <option value="@b.BusinessId">@b.Name</option>
            }
        </select>

      @*<InputText  @bind-Value="tutor.Business.Name" class="form-control" />*@
        <ValidationMessage For="@(() => tutor.BusinessId)" />
        <InputNumber id="BusinessId" @bind-Value="tutor.BusinessId" class="form-control" hidden />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>

    @if (DisplayDeleteButton)
        {
            <button type="button" class="btn btn-danger"
                    @onclick="DeleteProduct">
                Delete Tutor
            </button>
        }

</EditForm>


  <Confirm @ref="DeleteConfirmation"
      ConfirmationChanged ="ConfirmDelete_Click"
       ConfirmationMessage=@($"Are you sure you want to delete tutor \"{tutor.FirstName} {tutor.LastName}\" ?")>
    </Confirm>

<AddBusinessRazor @ref="AddBusinessModal" 
    AddBusinessChanged="ConfirmAddBusiness_Click" 
   ConfirmationMessage=@("Please add your business name.")>
</AddBusinessRazor>

@code {

    protected ConfirmBase DeleteConfirmation { get; set; }
    protected AddBusinessBase AddBusinessModal { get; set; }
    private bool DisplayDeleteButton { get; set; }

    protected ElementReference SelectBusinessElement;  // set the @ref for attribute


    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";
    public bool InvalidSubmit { get; set; } = false;

    BlazorEcommerceStaticWebApp.Shared.Tutor tutor =
        new BlazorEcommerceStaticWebApp.Shared.Tutor { };

    private IJSObjectReference _jsModule;

    protected override void OnInitialized()
    {
        TutorService.TutorsChanged += StateHasChanged;
        BusinessService.BusinessesChanged += StateHasChanged;
        BusinessService.Businesses = new List<Business>();

        btnText = Id == null ? "Save New Tutor" : "Update Tutor";
    }

    protected override async Task OnInitializedAsync()
    {
        await BusinessService.GetBusinesses();
        _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./scripts/Helper.js");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            DisplayDeleteButton = true;
            var result = await TutorService.GetTutorById((int)Id);
            if (result is not null)
            {
                tutor = result;

                //set selected business dropdown
                //await _jsModule.InvokeVoidAsync("SetBusinessDropDownIndex", tutor.BusinessId);
            }
            else
                NavigationManager.NavigateTo("/tutor");
        }
        else
        {
            DisplayDeleteButton = false;
        }


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // execute conditionally for loading data, otherwise this will load
        // every time the page refreshes
        //if (firstRender)
        //{
        //    //set selected business dropdown
        //    await _jsModule.InvokeVoidAsync("SetBusinessDropDownIndex", tutor.BusinessId);
        //}

        if (tutor.BusinessId != null)
        {
            await _jsModule.InvokeVoidAsync("SetBusinessDropDownIndex", tutor.BusinessId);
        }
    }

    async Task HandleSubmit()
    {
        InvalidSubmit = false;

        if (Id is null)
        {
            await TutorService.CreateTutor(tutor);
        }
        else
        {
            await TutorService.UpdateTutor(tutor);
        }
    }

    public void HandleInvalidSubmit()
    {
        FormSubmitMessage = "Invalid Data Submitted";
        InvalidSubmit = true;
    }

    async Task DeleteProduct()
    {
        DeleteConfirmation.Show();

        //  await TutorService.DeleteTutor(tutor);

        //js variants
        //await JS.InvokeVoidAsync("NoImplento");
        //await JS.InvokeVoidAsync("alert", "Not Implemented! Will delete tutor with id : " + Id);
        //await _jsModule.InvokeVoidAsync("showAlert", "JS function called from .NET");
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await TutorService.DeleteTutor(tutor);
        }
    }


    protected async Task ConfirmAddBusiness_Click(bool addConfirmed)
    {
        if (addConfirmed)
        {
            await BusinessService.GetBusinesses();           
            await _jsModule.InvokeVoidAsync("SetFocusToElement", SelectBusinessElement);

        }

    }

    async Task AddBusiness()
    {
        AddBusinessModal.Show();

        //js variants
        //await JS.InvokeVoidAsync("NoImplento");
        //await JS.InvokeVoidAsync("alert", "Not Implemented! Will delete tutor with id : " + Id);
        //await _jsModule.InvokeVoidAsync("showAlert", "JS function called from .NET");
    }

    async Task SelectBusiness(ChangeEventArgs e)
    {
        int businessId = Convert.ToInt32(e.Value);       
        var selectedBusiness = BusinessService.Businesses.FirstOrDefault(x => x.BusinessId == businessId);
        tutor.Business = selectedBusiness;
        tutor.BusinessId = selectedBusiness.BusinessId;


    }
}